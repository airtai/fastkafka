"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[1294],{3905:(t,e,a)=>{a.d(e,{Zo:()=>k,kt:()=>m});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var d=n.createContext({}),p=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},k=function(t){var e=p(t.components);return n.createElement(d.Provider,{value:e},t.children)},s="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,k=o(t,["components","mdxType","originalType","parentName"]),s=p(a),u=r,m=s["".concat(d,".").concat(u)]||s[u]||c[u]||l;return a?n.createElement(m,i(i({ref:e},k),{},{components:a})):n.createElement(m,i({ref:e},k))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[s]="string"==typeof t?t:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5043:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={},i=void 0,o={unversionedId:"api/fastkafka/testing/LocalRedpandaBroker",id:"version-0.8.0/api/fastkafka/testing/LocalRedpandaBroker",title:"LocalRedpandaBroker",description:"fastkafka.testing.LocalRedpandaBroker {fastkafka.testing.LocalRedpandaBroker}",source:"@site/versioned_docs/version-0.8.0/api/fastkafka/testing/LocalRedpandaBroker.md",sourceDirName:"api/fastkafka/testing",slug:"/api/fastkafka/testing/LocalRedpandaBroker",permalink:"/docs/api/fastkafka/testing/LocalRedpandaBroker",draft:!1,tags:[],version:"0.8.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ApacheKafkaBroker",permalink:"/docs/api/fastkafka/testing/ApacheKafkaBroker"},next:{title:"Tester",permalink:"/docs/api/fastkafka/testing/Tester"}},d={},p=[{value:"fastkafka.testing.LocalRedpandaBroker",id:"fastkafka.testing.LocalRedpandaBroker",level:2},{value:"<strong>init</strong>",id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.init",level:3},{value:"get_service_config_string",id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.get_service_config_string",level:3},{value:"is_started",id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.is_started",level:3},{value:"start",id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.start",level:3},{value:"stop",id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.stop",level:3}],k={toc:p},s="wrapper";function c(t){let{components:e,...a}=t;return(0,r.kt)(s,(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"fastkafka.testing.LocalRedpandaBroker"},"fastkafka.testing.LocalRedpandaBroker"),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_testing/local_redpanda_broker.py#L84-L200",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("p",null,"LocalRedpandaBroker class, used for running unique redpanda brokers in tests to prevent topic clashing."),(0,r.kt)("h3",{id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.init"},(0,r.kt)("strong",{parentName:"h3"},"init")),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_testing/local_redpanda_broker.py#L88-L120",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"__init__(\n    self,\n    topics=[],\n    retries=3,\n    apply_nest_asyncio=False,\n    listener_port=9092,\n    tag='v23.1.2',\n    seastar_core=1,\n    memory='1G',\n    mode='dev-container',\n    default_log_level='debug',\n    kwargs,\n)\n")),(0,r.kt)("p",null,"Initialises the LocalRedpandaBroker object"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"topics")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable[str]")),(0,r.kt)("td",{parentName:"tr",align:null},"List of topics to create after sucessfull redpanda broker startup"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"retries")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of retries to create redpanda service"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apply_nest_asyncio")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"set to True if running in notebook"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"listener_port")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Port on which the clients (producers and consumers) can connect"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"9092"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tag")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Tag of Redpanda image to use to start container"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'v23.1.2'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"seastar_core")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Core(s) to use byt Seastar (the framework Redpanda uses under the hood)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"memory")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of memory to make available to Redpanda"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'1G'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mode")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Mode to use to load configuration properties in container"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'dev-container'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default_log_level")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Log levels to use for Redpanda"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'debug'"))))),(0,r.kt)("h3",{id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.get_service_config_string"},"get_service_config_string"),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_testing/local_redpanda_broker.py#L168-L174",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"get_service_config_string(\n    self, service, data_dir\n)\n")),(0,r.kt)("p",null,"Generates a configuration for a service"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data_dir")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Path")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to the directory where the zookeepeer instance will save data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"required"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},'"redpanda", defines which service to get config string for'),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"required"))))),(0,r.kt)("h3",{id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.is_started"},"is_started"),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_testing/local_redpanda_broker.py#L123-L133",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"@property\nis_started(\n    self\n)\n")),(0,r.kt)("p",null,"Property indicating whether the LocalRedpandaBroker object is started."),(0,r.kt)("p",null,"The is_started property indicates if the LocalRedpandaBroker object is currently\nin a started state. This implies that Redpanda docker container has sucesfully\nstarted and is ready for handling events."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"True if the object is started, False otherwise.")))),(0,r.kt)("h3",{id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.start"},"start"),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_testing/local_redpanda_broker.py#L333-L372",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"start(\n    self\n)\n")),(0,r.kt)("p",null,"Starts a local redpanda broker instance synchronously"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Redpanda broker bootstrap server address in string format: add:port")))),(0,r.kt)("h3",{id:"fastkafka._testing.local_redpanda_broker.LocalRedpandaBroker.stop"},"stop"),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_testing/local_redpanda_broker.py#L376-L388",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"stop(\n    self\n)\n")),(0,r.kt)("p",null,"Stops a local redpanda broker instance synchronously"))}c.isMDXComponent=!0}}]);
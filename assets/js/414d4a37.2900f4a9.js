"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[7473],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>k});var o=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,o,n=function(e,a){if(null==e)return{};var t,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=o.createContext({}),p=function(e){var a=o.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},c=function(e){var a=p(e.components);return o.createElement(i.Provider,{value:a},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},d=o.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=n,k=m["".concat(i,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(k,s(s({ref:a},c),{},{components:t})):o.createElement(k,s({ref:a},c))}));function k(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,s=new Array(r);s[0]=d;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[m]="string"==typeof e?e:n,s[1]=l;for(var p=2;p<r;p++)s[p]=t[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5954:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=t(7462),n=(t(7294),t(3905));const r={},s="@consumes basics",l={unversionedId:"guides/Guide_11_Consumes_Basics",id:"version-0.5.0/guides/Guide_11_Consumes_Basics",title:"@consumes basics",description:"You can use @consumes decorator to consume messages from Kafka topics.",source:"@site/versioned_docs/version-0.5.0/guides/Guide_11_Consumes_Basics.md",sourceDirName:"guides",slug:"/guides/Guide_11_Consumes_Basics",permalink:"/docs/0.5.0/guides/Guide_11_Consumes_Basics",draft:!1,tags:[],version:"0.5.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FastKafka",permalink:"/docs/0.5.0/"},next:{title:"@produces basics",permalink:"/docs/0.5.0/guides/Guide_21_Produces_Basics"}},i={},p=[{value:"Import <code>FastKafka</code>",id:"import-fastkafka",level:2},{value:"Define the structure of the messages",id:"define-the-structure-of-the-messages",level:2},{value:"Create a base FastKafka app",id:"create-a-base-fastkafka-app",level:2},{value:"Create a consumer function and decorate it with <code>@consumes</code>",id:"create-a-consumer-function-and-decorate-it-with-consumes",level:2},{value:"Final app",id:"final-app",level:2},{value:"Run the app",id:"run-the-app",level:2},{value:"Send the message to kafka topic",id:"send-the-message-to-kafka-topic",level:2},{value:"Choosing a topic",id:"choosing-a-topic",level:2},{value:"Message data",id:"message-data",level:2}],c={toc:p},m="wrapper";function u(e){let{components:a,...t}=e;return(0,n.kt)(m,(0,o.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"consumes-basics"},"@consumes basics"),(0,n.kt)("p",null,"You can use ",(0,n.kt)("inlineCode",{parentName:"p"},"@consumes")," decorator to consume messages from Kafka topics."),(0,n.kt)("p",null,"In this guide we will create a simple FastKafka app that will consume\n",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorld")," messages from hello_world topic."),(0,n.kt)("h2",{id:"import-fastkafka"},"Import ",(0,n.kt)("a",{parentName:"h2",href:"/docs/0.5.0/api/fastkafka//#fastkafka.FastKafka"},(0,n.kt)("inlineCode",{parentName:"a"},"FastKafka"))),(0,n.kt)("p",null,"To use the ",(0,n.kt)("inlineCode",{parentName:"p"},"@consumes")," decorator, first we need to import the base\nFastKafka app to create our application."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from fastkafka import FastKafka\n")),(0,n.kt)("h2",{id:"define-the-structure-of-the-messages"},"Define the structure of the messages"),(0,n.kt)("p",null,"Next, you need to define the structure of the messages you want to\nconsume from the topic using ",(0,n.kt)("a",{parentName:"p",href:"https://docs.pydantic.dev/"},"pydantic"),". For\nthe guide we\u2019ll stick to something basic, but you are free to define any\ncomplex message structure you wish in your project, just make sure it\ncan be JSON encoded."),(0,n.kt)("p",null,"Let\u2019s import ",(0,n.kt)("inlineCode",{parentName:"p"},"BaseModel")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"Field")," from pydantic and create a simple\n",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorld")," class containing one string parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"msg")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from pydantic import BaseModel, Field\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\nclass HelloWorld(BaseModel):\n    msg: str = Field(\n        ...,\n        example="Hello",\n        description="Demo hello world message",\n    )\n')),(0,n.kt)("h2",{id:"create-a-base-fastkafka-app"},"Create a base FastKafka app"),(0,n.kt)("p",null,"Now we will create and define a base FastKafka app, replace the\n",(0,n.kt)("inlineCode",{parentName:"p"},"<url_of_your_kafka_bootstrap_server>")," and\n",(0,n.kt)("inlineCode",{parentName:"p"},"<port_of_your_kafka_bootstrap_server>")," with the actual values of your\nKafka bootstrap server"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\n\nkafka_brokers = {\n    "demo_broker": {\n        "url": "<url_of_your_kafka_bootstrap_server>",\n        "description": "local demo kafka broker",\n        "port": "<port_of_your_kafka_bootstrap_server>",\n    }\n}\n\napp = FastKafka(kafka_brokers=kafka_brokers)\n')),(0,n.kt)("h2",{id:"create-a-consumer-function-and-decorate-it-with-consumes"},"Create a consumer function and decorate it with ",(0,n.kt)("inlineCode",{parentName:"h2"},"@consumes")),(0,n.kt)("p",null,"Let\u2019s create a consumer function that will consume ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorld")," messages\nfrom ",(0,n.kt)("em",{parentName:"p"},"hello_world")," topic and log them."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastkafka._components.logger import get_logger\n\nlogger = get_logger(__name__)\n\n@app.consumes()\nasync def on_hello_world(msg: HelloWorld):\n    logger.info(f"Got msg: {msg}")\n')),(0,n.kt)("p",null,"The function decorated with the ",(0,n.kt)("inlineCode",{parentName:"p"},"@consumes")," decorator will be called\nwhen a message is produced to Kafka."),(0,n.kt)("p",null,"The message will then be injected into the typed ",(0,n.kt)("em",{parentName:"p"},"msg")," argument of the\nfunction and its type will be used to parse the message."),(0,n.kt)("p",null,"In this example case, when the message is sent into a ",(0,n.kt)("em",{parentName:"p"},"hello_world"),"\ntopic, it will be parsed into a HelloWorld class and ",(0,n.kt)("inlineCode",{parentName:"p"},"on_hello_world"),"\nfunction will be called with the parsed class as ",(0,n.kt)("em",{parentName:"p"},"msg")," argument value."),(0,n.kt)("h2",{id:"final-app"},"Final app"),(0,n.kt)("p",null,"Your app code should look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from fastkafka import FastKafka\nfrom pydantic import BaseModel, Field\n\nclass HelloWorld(BaseModel):\n    msg: str = Field(\n        ...,\n        example="Hello",\n        description="Demo hello world message",\n    )\n\n\nkafka_brokers = {\n    "demo_broker": {\n        "url": "<url_of_your_kafka_bootstrap_server>",\n        "description": "local demo kafka broker",\n        "port": "<port_of_your_kafka_bootstrap_server>",\n    }\n}\n\napp = FastKafka(kafka_brokers=kafka_brokers)\n\nfrom fastkafka._components.logger import get_logger\n\nlogger = get_logger(__name__)\n\n@app.consumes()\nasync def on_hello_world(msg: HelloWorld):\n    logger.info(f"Got msg: {msg}")\n')),(0,n.kt)("h2",{id:"run-the-app"},"Run the app"),(0,n.kt)("p",null,"Now we can run the app. Copy the code above in consumer_example.py and\nrun it by running"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"fastkafka run --num-workers=1 --kafka-broker=demo_broker consumer_example:app\n")),(0,n.kt)("p",null,"After running the command, you should see this output in your terminal:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[382372]: [INFO] fastkafka._application.app: set_kafka_broker() : Setting bootstrap_servers value to '127.0.0.1:9092'\n[382372]: [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n[382372]: [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'bootstrap_servers': '127.0.0.1:9092', 'auto_offset_reset': 'earliest', 'max_poll_records': 100}\n[382372]: [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n[382372]: [INFO] aiokafka.consumer.subscription_state: Updating subscribed topics to: frozenset({'hello_world'})\n[382372]: [INFO] aiokafka.consumer.consumer: Subscribed to topic(s): {'hello_world'}\n[382372]: [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n[382372]: [WARNING] aiokafka.cluster: Topic hello_world is not available during auto-create initialization\n[382372]: [INFO] aiokafka.consumer.group_coordinator: Metadata for topic has changed from {} to {'hello_world': 0}. \nStarting process cleanup, this may take a few seconds...\n[INFO] fastkafka._server: terminate_asyncio_process(): Terminating the process 382372...\n[382372]: [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n[382372]: [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n[INFO] fastkafka._server: terminate_asyncio_process(): Process 382372 terminated.\n")),(0,n.kt)("h2",{id:"send-the-message-to-kafka-topic"},"Send the message to kafka topic"),(0,n.kt)("p",null,"Lets send a ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorld")," message to the ",(0,n.kt)("em",{parentName:"p"},"hello_world")," topic and check if\nour consumer kafka application has logged the received message. In your\nterminal, run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'echo {\\"msg\\": \\"Hello world\\"} | kafka-console-producer.sh --topic=hello_world --bootstrap-server=<addr_of_your_kafka_bootstrap_server>\n')),(0,n.kt)("p",null,"You should see the \u201cGot msg: msg='Hello world'\" being logged by your\nconsumer."),(0,n.kt)("h2",{id:"choosing-a-topic"},"Choosing a topic"),(0,n.kt)("p",null,"You probably noticed that you didn\u2019t define which topic you are\nreceiving the message from, this is because the ",(0,n.kt)("inlineCode",{parentName:"p"},"@consumes")," decorator\ndetermines the topic by default from your function name. The decorator\nwill take your function name and strip the default \u201con","_",'" prefix from it\nand use the rest as the topic name. In this example case, the topic is\n',(0,n.kt)("em",{parentName:"p"},"hello_world"),"."),(0,n.kt)("p",null,"You can choose your custom prefix by defining the ",(0,n.kt)("inlineCode",{parentName:"p"},"prefix")," parameter in\nconsumes decorator, like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastkafka._components.logger import get_logger\n\nlogger = get_logger(__name__)\n\n@app.consumes(prefix="read_from_")\nasync def read_from_hello_world(msg: HelloWorld):\n    logger.info(f"Got msg: {msg}")\n')),(0,n.kt)("p",null,"Also, you can define the topic name completely by defining the ",(0,n.kt)("inlineCode",{parentName:"p"},"topic"),"\nin parameter in consumes decorator, like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastkafka._components.logger import get_logger\n\nlogger = get_logger(__name__)\n\n@app.consumes(topic="my_special_topic")\nasync def on_hello_world(msg: HelloWorld):\n    logger.info(f"Got msg: {msg}")\n')),(0,n.kt)("h2",{id:"message-data"},"Message data"),(0,n.kt)("p",null,"The message received from kafka is translated from binary JSON\nrepresentation int the class defined by typing of ",(0,n.kt)("em",{parentName:"p"},"msg")," parameter in the\nfunction decorated by the ",(0,n.kt)("inlineCode",{parentName:"p"},"@consumes")," decorator."),(0,n.kt)("p",null,"In this example case, the message will be parsed into a ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorld"),"\nclass."))}u.isMDXComponent=!0}}]);
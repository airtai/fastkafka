"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[4358],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>k});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=n.createContext({}),l=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},s=function(e){var r=l(e.components);return n.createElement(d.Provider,{value:r},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=l(t),u=a,k=p["".concat(d,".").concat(u)]||p[u]||f[u]||o;return t?n.createElement(k,c(c({ref:r},s),{},{components:t})):n.createElement(k,c({ref:r},s))}));function k(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=u;var i={};for(var d in r)hasOwnProperty.call(r,d)&&(i[d]=r[d]);i.originalType=e,i[p]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9462:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const o={},c=void 0,i={unversionedId:"api/fastkafka/encoder/avro_encoder",id:"version-0.7.0/api/fastkafka/encoder/avro_encoder",title:"avro_encoder",description:"fastkafka.encoder.avroencoder {fastkafka.encoder.avroencoder}",source:"@site/versioned_docs/version-0.7.0/api/fastkafka/encoder/avro_encoder.md",sourceDirName:"api/fastkafka/encoder",slug:"/api/fastkafka/encoder/avro_encoder",permalink:"/docs/0.7.0/api/fastkafka/encoder/avro_encoder",draft:!1,tags:[],version:"0.7.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"avro_decoder",permalink:"/docs/0.7.0/api/fastkafka/encoder/avro_decoder"},next:{title:"avsc_to_pydantic",permalink:"/docs/0.7.0/api/fastkafka/encoder/avsc_to_pydantic"}},d={},l=[{value:"<code>fastkafka.encoder.avro_encoder</code>",id:"fastkafka.encoder.avro_encoder",level:2},{value:"<code>avro_encoder</code>",id:"avro_encoder",level:3}],s={toc:l},p="wrapper";function f(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"fastkafka.encoder.avro_encoder"},(0,a.kt)("inlineCode",{parentName:"h2"},"fastkafka.encoder.avro_encoder")),(0,a.kt)("h3",{id:"avro_encoder"},(0,a.kt)("inlineCode",{parentName:"h3"},"avro_encoder")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"def avro_encoder(msg: pydantic.main.BaseModel) -> bytes")),(0,a.kt)("p",null,"Encoder to encode pydantic instances to avro message"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg"),": An instance of pydantic basemodel")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A bytes message which is encoded from pydantic basemodel")))}f.isMDXComponent=!0}}]);
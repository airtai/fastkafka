"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[4884],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},k="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),k=l(a),d=r,f=k["".concat(p,".").concat(d)]||k[d]||c[d]||o;return a?n.createElement(f,i(i({ref:t},u),{},{components:a})):n.createElement(f,i({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[k]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2950:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={},i="Defining a partition key",s={unversionedId:"guides/Guide_22_Partition_Keys",id:"version-0.6.0/guides/Guide_22_Partition_Keys",title:"Defining a partition key",description:"Partition keys are used in Apache Kafka to determine which partition a",source:"@site/versioned_docs/version-0.6.0/guides/Guide_22_Partition_Keys.md",sourceDirName:"guides",slug:"/guides/Guide_22_Partition_Keys",permalink:"/docs/0.6.0/guides/Guide_22_Partition_Keys",draft:!1,tags:[],version:"0.6.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"@produces basics",permalink:"/docs/0.6.0/guides/Guide_21_Produces_Basics"},next:{title:"Batch producing",permalink:"/docs/0.6.0/guides/Guide_23_Batch_Producing"}},p={},l=[{value:"Return a key from the producing function",id:"return-a-key-from-the-producing-function",level:2},{value:"App example",id:"app-example",level:2},{value:"Run the app",id:"run-the-app",level:2},{value:"Check if the message was sent to the Kafka topic with the desired key",id:"check-if-the-message-was-sent-to-the-kafka-topic-with-the-desired-key",level:2}],u={toc:l},k="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(k,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"defining-a-partition-key"},"Defining a partition key"),(0,r.kt)("p",null,"Partition keys are used in Apache Kafka to determine which partition a\nmessage should be written to. This ensures that related messages are\nkept together in the same partition, which can be useful for ensuring\norder or for grouping related messages together for efficient\nprocessing. Additionally, partitioning data across multiple partitions\nallows Kafka to distribute load across multiple brokers and scale\nhorizontally, while replicating data across multiple brokers provides\nfault tolerance."),(0,r.kt)("p",null,"You can define your partition keys when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@produces")," decorator,\nthis guide will demonstrate to you this feature."),(0,r.kt)("h2",{id:"return-a-key-from-the-producing-function"},"Return a key from the producing function"),(0,r.kt)("p",null,"To define a key for the message that you want to produce to Kafka topic,\nyou need to wrap the response into\n",(0,r.kt)("a",{parentName:"p",href:"/docs/0.6.0/api/fastkafka/KafkaEvent/#fastkafka.KafkaEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"KafkaEvent")),"\nclass and set the key value. Check the example below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastkafka import KafkaEvent\n\n@app.produces()\nasync def to_hello_world(msg: str) -> KafkaEvent[HelloWorld]:\n    return KafkaEvent(HelloWorld(msg=msg), key=b"my_key")\n')),(0,r.kt)("p",null,"In the example, we want to return the ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld")," message class with\nthe key defined as ",(0,r.kt)("em",{parentName:"p"},"my_key"),". So, we wrap the message and key into a\nKafkaEvent class and return it as such."),(0,r.kt)("p",null,"While generating the documentation, the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/0.6.0/api/fastkafka/KafkaEvent/#fastkafka.KafkaEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"KafkaEvent")),"\nclass will be unwrapped and the ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld")," class will be documented in\nthe definition of message type, same way if you didn\u2019t use the key."),(0,r.kt)("p",null,'!!! info "Which key to choose?"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Although we have defined a fixed key in this example, nothing is stopping you from calculating a key beforehand and passing it in, or using the message parts for key calculation. Just make sure that the key is in `bytes` format when you wrap it in `KafkaEvent`.\n")),(0,r.kt)("h2",{id:"app-example"},"App example"),(0,r.kt)("p",null,"We will modify the app example from ",(0,r.kt)("strong",{parentName:"p"},"@producer basics")," guide to return\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld")," with our key. The final app will look like this (make\nsure you replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"<url_of_your_kafka_bootstrap_server>")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"<port_of_your_kafka_bootstrap_server>")," with the actual values):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastkafka import FastKafka\nfrom pydantic import BaseModel, Field\n\nclass HelloWorld(BaseModel):\n    msg: str = Field(\n        ...,\n        example="Hello",\n        description="Demo hello world message",\n    )\n\nkafka_brokers = {\n    "demo_broker": {\n        "url": "<url_of_your_kafka_bootstrap_server>",\n        "description": "local demo kafka broker",\n        "port": "<port_of_your_kafka_bootstrap_server>",\n    }\n}\n\napp = FastKafka(kafka_brokers=kafka_brokers)\n\nfrom fastkafka import KafkaEvent\n\n@app.produces()\nasync def to_hello_world(msg: str) -> KafkaEvent[HelloWorld]:\n    return KafkaEvent(HelloWorld(msg=msg), key=b"my_key")\n\nimport asyncio\n\n@app.run_in_background()\nasync def hello_every_second():\n    while(True):\n        await to_hello_world(msg="Hello world!")\n        await asyncio.sleep(1)\n')),(0,r.kt)("h2",{id:"run-the-app"},"Run the app"),(0,r.kt)("p",null,"Now we can run the app. Copy the code above in producer_example.py and\nrun it by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"fastkafka run --num-workers=1 --kafka-broker=demo_broker producer_with_key_example:app\n")),(0,r.kt)("p",null,"After running the command, you should see this output in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[347835]: [INFO] fastkafka._application.app: run_in_background() : Adding function 'hello_every_second' as background task\n[347835]: [INFO] fastkafka._application.app: set_kafka_broker() : Setting bootstrap_servers value to '127.0.0.1:9092'\n[347835]: [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': '127.0.0.1:9092'}'\n[347835]: [INFO] fastkafka._application.app: _populate_bg_tasks() : Starting background task 'hello_every_second'\nStarting process cleanup, this may take a few seconds...\n[INFO] fastkafka._server: terminate_asyncio_process(): Terminating the process 347835...\n[347835]: [INFO] fastkafka._application.app: _shutdown_bg_tasks() : Cancelling background task 'hello_every_second'\n[347835]: [INFO] fastkafka._application.app: _shutdown_bg_tasks() : Waiting for background task 'hello_every_second' to finish\n[347835]: [INFO] fastkafka._application.app: _shutdown_bg_tasks() : Execution finished for background task 'hello_every_second'\n[INFO] fastkafka._server: terminate_asyncio_process(): Process 347835 terminated.\n")),(0,r.kt)("h2",{id:"check-if-the-message-was-sent-to-the-kafka-topic-with-the-desired-key"},"Check if the message was sent to the Kafka topic with the desired key"),(0,r.kt)("p",null,'Lets check the topic and see if there is a \u201cHello world!" message in the\nhello_world topic with the defined key. In your terminal run:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kafka-console-consumer.sh --topic=hello_world --property print.key=true --from-beginning --bootstrap-server=<address_of_your_kafka_bootstrap_server>\n")),(0,r.kt)("p",null,"You should see the ",(0,r.kt)("em",{parentName:"p"},'my_key {\u201cmsg": \u201cHello world!"}')," messages in your\ntopic appearing, the ",(0,r.kt)("em",{parentName:"p"},"my_key")," part of the message is the key that we\ndefined in our producing function."))}c.isMDXComponent=!0}}]);
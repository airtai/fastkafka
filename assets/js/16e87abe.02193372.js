"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[7132],{3905:(t,e,a)=>{a.d(e,{Zo:()=>k,kt:()=>d});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),c=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},k=function(t){var e=c(t.components);return n.createElement(s.Provider,{value:e},t.children)},u="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,k=i(t,["components","mdxType","originalType","parentName"]),u=c(a),m=r,d=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(d,l(l({ref:e},k),{},{components:a})):n.createElement(d,l({ref:e},k))}));function d(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3631:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={},l=void 0,i={unversionedId:"api/fastkafka/executors/DynamicTaskExecutor",id:"version-0.8.0/api/fastkafka/executors/DynamicTaskExecutor",title:"DynamicTaskExecutor",description:"fastkafka.executors.DynamicTaskExecutor {fastkafka.executors.DynamicTaskExecutor}",source:"@site/versioned_docs/version-0.8.0/api/fastkafka/executors/DynamicTaskExecutor.md",sourceDirName:"api/fastkafka/executors",slug:"/api/fastkafka/executors/DynamicTaskExecutor",permalink:"/docs/api/fastkafka/executors/DynamicTaskExecutor",draft:!1,tags:[],version:"0.8.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"json_encoder",permalink:"/docs/api/fastkafka/encoder/json_encoder"},next:{title:"SequentialExecutor",permalink:"/docs/api/fastkafka/executors/SequentialExecutor"}},s={},c=[{value:"fastkafka.executors.DynamicTaskExecutor",id:"fastkafka.executors.DynamicTaskExecutor",level:2},{value:"<strong>init</strong>",id:"fastkafka._components.task_streaming.DynamicTaskExecutor.init",level:3},{value:"run",id:"fastkafka._components.task_streaming.DynamicTaskExecutor.run",level:3}],k={toc:c},u="wrapper";function p(t){let{components:e,...a}=t;return(0,r.kt)(u,(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"fastkafka.executors.DynamicTaskExecutor"},"fastkafka.executors.DynamicTaskExecutor"),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_components/task_streaming.py#L207-L272",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("p",null,"A class that implements a dynamic task executor for processing consumer records."),(0,r.kt)("p",null,"The DynamicTaskExecutor class extends the StreamExecutor class and provides functionality\nfor running a tasks in parallel using asyncio.Task."),(0,r.kt)("h3",{id:"fastkafka._components.task_streaming.DynamicTaskExecutor.init"},(0,r.kt)("strong",{parentName:"h3"},"init")),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_components/task_streaming.py#L214-L237",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"__init__(\n    self, throw_exceptions=False, max_buffer_size=100000, size=100000\n)\n")),(0,r.kt)("p",null,"Create an instance of DynamicTaskExecutor"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"throw_exceptions")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Flag indicating whether exceptions should be thrown ot logged.Defaults to False."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"max_buffer_size")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum buffer size for the memory object stream.Defaults to 100_000."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"100000"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Size of the task pool. Defaults to 100_000."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"100000"))))),(0,r.kt)("h3",{id:"fastkafka._components.task_streaming.DynamicTaskExecutor.run"},"run"),(0,r.kt)("a",{href:"https://github.com/airtai/fastkafka/blob/0.8.0/fastkafka/_components/task_streaming.py#L239-L272",class:"link-to-source",target:"_blank"},"View source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"run(\n    self, is_shutting_down_f, generator, processor\n)\n")),(0,r.kt)("p",null,"Runs the dynamic task executor."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is_shutting_down_f")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Callable[[], bool]")),(0,r.kt)("td",{parentName:"tr",align:null},"Function to check if the executor is shutting down."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"required"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"generator")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Callable[[], Awaitable[aiokafka.structs.ConsumerRecord]]")),(0,r.kt)("td",{parentName:"tr",align:null},"Generator function for retrieving consumer records."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"required"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"processor")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Callable[[aiokafka.structs.ConsumerRecord], Awaitable[NoneType]]")),(0,r.kt)("td",{parentName:"tr",align:null},"Processor function for processing consumer records."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"required"))))))}p.isMDXComponent=!0}}]);
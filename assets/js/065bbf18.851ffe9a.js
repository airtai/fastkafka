"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[1244],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>f});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),k=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=k(e.components);return n.createElement(p.Provider,{value:a},e.children)},_="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},l=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),_=k(t),l=o,f=_["".concat(p,".").concat(l)]||_[l]||c[l]||s;return t?n.createElement(f,r(r({ref:a},m),{},{components:t})):n.createElement(f,r({ref:a},m))}));function f(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=l;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[_]="string"==typeof e?e:o,r[1]=i;for(var k=2;k<s;k++)r[k]=t[k];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}l.displayName="MDXCreateElement"},7426:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>k});var n=t(7462),o=(t(7294),t(3905));const s={},r="Using Tester to test FastKafka",i={unversionedId:"guides/Guide_33_Using_Tester_class_to_test_fastkafka",id:"guides/Guide_33_Using_Tester_class_to_test_fastkafka",title:"Using Tester to test FastKafka",description:"In order to speed up development and make testing easier, we have",source:"@site/docs/guides/Guide_33_Using_Tester_class_to_test_fastkafka.md",sourceDirName:"guides",slug:"/guides/Guide_33_Using_Tester_class_to_test_fastkafka",permalink:"/docs/next/guides/Guide_33_Using_Tester_class_to_test_fastkafka",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using multiple Kafka clusters",permalink:"/docs/next/guides/Guide_24_Using_Multiple_Kafka_Clusters"},next:{title:"Using Redpanda to test FastKafka",permalink:"/docs/next/guides/Guide_31_Using_redpanda_to_test_fastkafka"}},p={},k=[{value:"Basic example",id:"basic-example",level:2},{value:"Testing the application",id:"testing-the-application",level:3},{value:"Final script",id:"final-script",level:3},{value:"Using external brokers",id:"using-external-brokers",level:2},{value:"Example: New Employee app",id:"example-new-employee-app",level:2},{value:"Testing the application",id:"testing-the-application-1",level:3},{value:"Final script",id:"final-script-1",level:3}],m={toc:k},_="wrapper";function c(e){let{components:a,...t}=e;return(0,o.kt)(_,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-tester-to-test-fastkafka"},"Using Tester to test FastKafka"),(0,o.kt)("p",null,"In order to speed up development and make testing easier, we have\nimplemented the ",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester")," class."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester")," instance starts\nin-memory implementation of Kafka broker i.e.\xa0there is no need for\nstarting localhost Kafka service for testing FastKafka apps. The\n",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester")," will redirect ",(0,o.kt)("inlineCode",{parentName:"p"},"consumes"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"produces")," decorated functions to the in-memory Kafka broker so that\nyou can quickly test FasKafka apps without the need of a running Kafka\nbroker and all its dependencies. Also, for each FastKafka ",(0,o.kt)("inlineCode",{parentName:"p"},"consumes")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"produces")," function, ",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester")," will\ncreate it\u2019s mirrored fuction i.e.\xa0if the ",(0,o.kt)("inlineCode",{parentName:"p"},"consumes")," function is\nimplemented, the ",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester")," will\ncreate the ",(0,o.kt)("inlineCode",{parentName:"p"},"produces")," function (and the other way - if the ",(0,o.kt)("inlineCode",{parentName:"p"},"produces"),"\nfunction is implemented, ",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester"),"\nwill create ",(0,o.kt)("inlineCode",{parentName:"p"},"consumes")," function)."),(0,o.kt)("h2",{id:"basic-example"},"Basic example"),(0,o.kt)("p",null,"To showcase the functionalities of FastKafka and illustrate the concepts\ndiscussed, we can use a simple test message called ",(0,o.kt)("inlineCode",{parentName:"p"},"TestMsg"),". Here\u2019s the\ndefinition of the ",(0,o.kt)("inlineCode",{parentName:"p"},"TestMsg")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class TestMsg(BaseModel):\n    msg: str = Field(...)\n\n\ntest_msg = TestMsg(msg="signal")\n')),(0,o.kt)("p",null,"In this example we have implemented\n",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/fastkafka/#fastkafka.FastKafka"},(0,o.kt)("inlineCode",{parentName:"a"},"FastKafka")),"\napp with one ",(0,o.kt)("inlineCode",{parentName:"p"},"consumes")," and one ",(0,o.kt)("inlineCode",{parentName:"p"},"produces")," function. ",(0,o.kt)("inlineCode",{parentName:"p"},"on_input")," function\nconsumes messages from the ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," topic and ",(0,o.kt)("inlineCode",{parentName:"p"},"to_output")," function\nproduces messages to the ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," topic."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": it is necessary to define parameter and return types in the\nproduces and consumes functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, Field\n\napp = FastKafka()\n\n\n@app.consumes()\nasync def on_input(msg: TestMsg):\n    await to_output(TestMsg(msg=f"Hello {msg.msg}"))\n\n\n@app.produces()\nasync def to_output(msg: TestMsg) -> TestMsg:\n    return msg\n')),(0,o.kt)("h3",{id:"testing-the-application"},"Testing the application"),(0,o.kt)("p",null,"In this example ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," has imlemented ",(0,o.kt)("inlineCode",{parentName:"p"},"on_input")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"to_output"),"\nfunctions. We can now use ",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester"),"\nto create their mirrored functions: ",(0,o.kt)("inlineCode",{parentName:"p"},"to_input")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"on_output"),"."),(0,o.kt)("p",null,"Testing process for this example could look like this:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"tester")," produces the message to the ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," topic")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Assert that the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," consumed the message by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"on_input"),"\nwith the accurate argument")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Within ",(0,o.kt)("inlineCode",{parentName:"p"},"on_input")," function, ",(0,o.kt)("inlineCode",{parentName:"p"},"to_output")," function is called - and\nmessage is produced to the ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," topic")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Assert that the ",(0,o.kt)("inlineCode",{parentName:"p"},"tester")," consumed the message by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"on_output"),"\nwith the accurate argument"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'async with Tester(app).using_inmemory_broker() as tester:\n    input_msg = TestMsg(msg="Mickey")\n\n    # tester produces message to the input topic\n    await tester.to_input(input_msg)\n    # previous line is equal to\n    # await tester.mirrors[app.on_input](input_msg)\n\n    # assert that app consumed from the input topic and it was called with the accurate argument\n    await app.awaited_mocks.on_input.assert_called_with(\n        TestMsg(msg="Mickey"), timeout=5\n    )\n    # assert that tester consumed from the output topic and it was called with the accurate argument\n    await tester.on_output.assert_called_with(TestMsg(msg="Hello Mickey"), timeout=5)\nprint("ok")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"23-07-31 10:38:30.810 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-07-31 10:38:30.811 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-07-31 10:38:30.812 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'localhost:9092'}'\n23-07-31 10:38:30.812 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:30.826 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'localhost:9092'}'\n23-07-31 10:38:30.827 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:30.827 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:30.828 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'localhost:9092'}\n23-07-31 10:38:30.828 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:30.829 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:30.829 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:30.830 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['input']\n23-07-31 10:38:30.830 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:30.835 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:30.835 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'localhost:9092'}\n23-07-31 10:38:30.836 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:30.836 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:30.836 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:30.837 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['output']\n23-07-31 10:38:30.837 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:34.828 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:34.828 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:34.829 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:34.829 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:34.830 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:34.831 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:34.831 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:34.832 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:34.832 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\nok\n")),(0,o.kt)("h3",{id:"final-script"},"Final script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\nfrom fastkafka._application.app import FastKafka\nfrom fastkafka._application.tester import Tester\nfrom pydantic import BaseModel, Field\n\n\nclass TestMsg(BaseModel):\n    msg: str = Field(...)\n\n\napp = FastKafka()\n\n\n@app.consumes()\nasync def on_input(msg: TestMsg):\n    await to_output(TestMsg(msg=f"Hello {msg.msg}"))\n\n\n@app.produces()\nasync def to_output(msg: TestMsg) -> TestMsg:\n    return msg\n\n\nasync def async_tests():\n    async with Tester(app).using_inmemory_broker() as tester:\n        input_msg = TestMsg(msg="Mickey")\n\n        # tester produces message to the input topic\n        await tester.to_input(input_msg)\n\n        # assert that app consumed from the input topic and it was called with the accurate argument\n        await app.awaited_mocks.on_input.assert_called_with(\n            TestMsg(msg="Mickey"), timeout=5\n        )\n        # assert that tester consumed from the output topic and it was called with the accurate argument\n        await tester.awaited_mocks.on_output.assert_called_with(\n            TestMsg(msg="Hello Mickey"), timeout=5\n        )\n    print("ok")\n\n\nif __name__ == "__main__":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_tests())\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"23-07-31 10:38:34.855 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-07-31 10:38:34.856 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-07-31 10:38:34.856 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'localhost:9092'}'\n23-07-31 10:38:34.857 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:34.871 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'localhost:9092'}'\n23-07-31 10:38:34.872 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:34.872 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:34.873 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'localhost:9092'}\n23-07-31 10:38:34.874 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:34.875 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:34.877 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:34.877 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['input']\n23-07-31 10:38:34.878 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:34.878 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:34.879 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'localhost:9092'}\n23-07-31 10:38:34.879 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:34.879 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:34.880 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:34.880 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['output']\n23-07-31 10:38:34.881 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:38.873 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:38.873 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:38.874 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:38.874 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:38.875 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:38.876 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:38.877 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:38.877 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:38.878 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\nok\n")),(0,o.kt)("h2",{id:"using-external-brokers"},"Using external brokers"),(0,o.kt)("p",null,"If you have already running brokers e.g.\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"kafka_brokers"),", you can use\n",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester")," method\n",(0,o.kt)("inlineCode",{parentName:"p"},"using_external_broker")," to set brokers which will be used in tests."),(0,o.kt)("p",null,"The same example as previous but with external ",(0,o.kt)("inlineCode",{parentName:"p"},"kafka_brokers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# content of the "application_test.py" file\n\nimport asyncio\nfrom fastkafka._application.app import FastKafka\nfrom fastkafka._application.tester import Tester\nfrom pydantic import BaseModel, Field\n\n\nclass TestMsg(BaseModel):\n    msg: str = Field(...)\n\n\nkafka_brokers = {\n    "localhost": {\n        "url": "localhost",\n        "description": "local development kafka broker",\n        "port": 9092,\n    },\n    "production": {\n        "url": "kafka.airt.ai",\n        "description": "production kafka broker",\n        "port": 9092,\n        "protocol": "kafka-secure",\n        "security": {"type": "plain"},\n    },\n}\n\napp = FastKafka(\n    title="Demo Kafka app",\n    kafka_brokers=kafka_brokers,\n)\n\n@app.consumes()\nasync def on_input(msg: TestMsg):\n    await to_output(TestMsg(msg=f"Hello {msg.msg}"))\n\n\n@app.produces()\nasync def to_output(msg: TestMsg) -> TestMsg:\n    return msg\n\n\nasync def async_tests():\n    async with Tester(app).using_external_broker(bootstrap_servers_id="production") as tester:\n        input_msg = TestMsg(msg="Mickey")\n\n        # tester produces message to the input topic\n        await tester.to_input(input_msg)\n\n        # assert that app consumed from the input topic and it was called with the accurate argument\n        await app.awaited_mocks.on_input.assert_called_with(\n            TestMsg(msg="Mickey"), timeout=5\n        )\n        # assert that tester consumed from the output topic and it was called with the accurate argument\n        await tester.awaited_mocks.on_output.assert_called_with(\n            TestMsg(msg="Hello Mickey"), timeout=5\n        )\n    print("ok")\n\n\nif __name__ == "__main__":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_tests())\n')),(0,o.kt)("h2",{id:"example-new-employee-app"},"Example: New Employee app"),(0,o.kt)("p",null,"In this example, our ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," has one consumes and two produces functions."),(0,o.kt)("p",null,"Every time a company hires an ",(0,o.kt)("inlineCode",{parentName:"p"},"Employee"),", some employee data is sent to\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"new_employee")," topic."),(0,o.kt)("p",null,"That\u2019s when our application comes into play! The app consumes this data\nby calling ",(0,o.kt)("inlineCode",{parentName:"p"},"on_new_employee"),". Within this function, ",(0,o.kt)("inlineCode",{parentName:"p"},"to_employee_email"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"to_welcome_message")," functions are called - and messages are\nproduced to the ",(0,o.kt)("inlineCode",{parentName:"p"},"employee_email")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"welcome_message")," topic."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Employee(BaseModel):\n    name: str\n    surname: str\n    email: Optional[str] = None\n\n\nclass EmaiMessage(BaseModel):\n    sender: str = "info@gmail.com"\n    receiver: str\n    subject: str\n    message: str\n\nkafka_brokers = dict(localhost=[dict(url="server_1", port=9092)], production=[dict(url="production_server_1", port=9092)])\napp = FastKafka(kafka_brokers=kafka_brokers)\n\n\n@app.consumes()\nasync def on_new_employee(msg: Employee):\n    employee = await to_employee_email(msg)\n    await to_welcome_message(employee)\n\n\n@app.produces()\nasync def to_employee_email(employee: Employee) -> Employee:\n    # generate new email\n    employee.email = employee.name + "." + employee.surname + "@gmail.com"\n    return employee\n\n\n@app.produces()\nasync def to_welcome_message(employee: Employee) -> EmaiMessage:\n    message = f"Dear {employee.name},\\nWelcome to the company"\n    return EmaiMessage(receiver=employee.email, subject="Welcome", message=message)\n')),(0,o.kt)("h3",{id:"testing-the-application-1"},"Testing the application"),(0,o.kt)("p",null,"In this example ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," has imlemented ",(0,o.kt)("inlineCode",{parentName:"p"},"on_new_employee"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"to_employee_email")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"to_welcome_message")," functions. We can now use\n",(0,o.kt)("a",{parentName:"p",href:"../../api/fastkafka/testing/Tester/"},"Tester")," to create their mirrored\nfunctions: ",(0,o.kt)("inlineCode",{parentName:"p"},"to_new_employee"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"on_employee_email")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"on_welcome_message"),"."),(0,o.kt)("p",null,"Testing process:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"tester")," produces message to the ",(0,o.kt)("inlineCode",{parentName:"p"},"new_employee")," topic")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Assert that the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," consumed the message from the ",(0,o.kt)("inlineCode",{parentName:"p"},"new_employee"),"\ntopic with the accurate argument")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Within ",(0,o.kt)("inlineCode",{parentName:"p"},"on_new_employee")," function, ",(0,o.kt)("inlineCode",{parentName:"p"},"to_employee_email")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"to_welcome_message")," functions are called - and messages are\nproduced to the ",(0,o.kt)("inlineCode",{parentName:"p"},"employee_email")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"welcome_message")," topic")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Assert that the ",(0,o.kt)("inlineCode",{parentName:"p"},"tester")," consumed the message by calling\n",(0,o.kt)("inlineCode",{parentName:"p"},"on_employee_email"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Assert that the ",(0,o.kt)("inlineCode",{parentName:"p"},"tester")," consumed the message by calling\n",(0,o.kt)("inlineCode",{parentName:"p"},"on_welcome_message")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'assert app._kafka_config["bootstrap_servers_id"] == "localhost"\n\nasync with Tester(app).using_inmemory_broker(bootstrap_servers_id="production") as tester:\n    assert app._kafka_config["bootstrap_servers_id"] == "production"\n    assert tester._kafka_config["bootstrap_servers_id"] == "production"\n\n    # produce the message to new_employee topic\n    await tester.to_new_employee(Employee(name="Mickey", surname="Mouse"))\n    # previous line is equal to:\n    # await tester.mirrors[app.on_new_employee](Employee(name="Mickey", surname="Mouse"))\n\n    # Assert app consumed the message\n    await app.awaited_mocks.on_new_employee.assert_called_with(\n        Employee(name="Mickey", surname="Mouse"), timeout=5\n    )\n\n    # If the the previous assert is true (on_new_employee was called),\n    # to_employee_email and to_welcome_message were called inside on_new_employee function\n\n    # Now we can check if this two messages were consumed\n    await tester.awaited_mocks.on_employee_email.assert_called(timeout=5)\n    await tester.awaited_mocks.on_welcome_message.assert_called(timeout=5)\n\nassert app._kafka_config["bootstrap_servers_id"] == "localhost"\n\nprint("ok")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"23-07-31 10:38:40.069 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-07-31 10:38:40.070 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-07-31 10:38:40.070 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': ['production_server_1:9092']}'\n23-07-31 10:38:40.071 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:40.071 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': ['production_server_1:9092']}'\n23-07-31 10:38:40.072 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:40.091 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': ['production_server_1:9092']}'\n23-07-31 10:38:40.091 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:40.092 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:40.092 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': ['production_server_1:9092']}\n23-07-31 10:38:40.093 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:40.093 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:40.094 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:40.094 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['new_employee']\n23-07-31 10:38:40.095 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:40.096 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:40.097 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': ['production_server_1:9092']}\n23-07-31 10:38:40.098 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:40.099 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:40.099 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:40.100 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['employee_email']\n23-07-31 10:38:40.100 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:40.101 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:40.101 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': ['production_server_1:9092']}\n23-07-31 10:38:40.102 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:40.103 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:40.103 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:40.103 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['welcome_message']\n23-07-31 10:38:40.104 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:44.092 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:44.093 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:44.093 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:44.094 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:44.094 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:44.095 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:44.095 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:44.096 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:44.096 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:44.096 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:44.097 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:44.097 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:44.097 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\nok\n")),(0,o.kt)("h3",{id:"final-script-1"},"Final script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\nfrom fastkafka._application.app import FastKafka\nfrom fastkafka._application.tester import Tester\nfrom pydantic import BaseModel, Field\nfrom typing import Optional\n\n\nclass Employee(BaseModel):\n    name: str\n    surname: str\n    email: Optional[str] = None\n\n\nclass EmaiMessage(BaseModel):\n    sender: str = "info@gmail.com"\n    receiver: str\n    subject: str\n    message: str\n\n\nkafka_brokers = dict(localhost=[dict(url="server_1", port=9092)], production=[dict(url="production_server_1", port=9092)])\napp = FastKafka(kafka_brokers=kafka_brokers)\n\n\n@app.consumes()\nasync def on_new_employee(msg: Employee):\n    employee = await to_employee_email(msg)\n    await to_welcome_message(employee)\n\n\n@app.produces()\nasync def to_employee_email(employee: Employee) -> Employee:\n    # generate new email\n    employee.email = employee.name + "." + employee.surname + "@gmail.com"\n    return employee\n\n\n@app.produces()\nasync def to_welcome_message(employee: Employee) -> EmaiMessage:\n    message = f"Dear {employee.name},\\nWelcome to the company"\n    return EmaiMessage(receiver=employee.email, subject="Welcome", message=message)\n\n\nasync def async_tests():\n    assert app._kafka_config["bootstrap_servers_id"] == "localhost"\n    \n    async with Tester(app).using_inmemory_broker(bootstrap_servers_id="production") as tester:\n        assert app._kafka_config["bootstrap_servers_id"] == "production"\n        assert tester._kafka_config["bootstrap_servers_id"] == "production"\n    \n        # produce the message to new_employee topic\n        await tester.to_new_employee(Employee(name="Mickey", surname="Mouse"))\n        # previous line is equal to:\n        # await tester.mirrors[app.on_new_employee](Employee(name="Mickey", surname="Mouse"))\n\n        # Assert app consumed the message\n        await app.awaited_mocks.on_new_employee.assert_called_with(\n            Employee(name="Mickey", surname="Mouse"), timeout=5\n        )\n\n        # If the the previous assert is true (on_new_employee was called),\n        # to_employee_email and to_welcome_message were called inside on_new_employee function\n\n        # Now we can check if this two messages were consumed\n        await tester.awaited_mocks.on_employee_email.assert_called(timeout=5)\n        await tester.awaited_mocks.on_welcome_message.assert_called(timeout=5)\n    \n    assert app._kafka_config["bootstrap_servers_id"] == "localhost"\n    print("ok")\n\n\nif __name__ == "__main__":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_tests())\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"23-07-31 10:38:47.045 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-07-31 10:38:47.046 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-07-31 10:38:47.046 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': ['production_server_1:9092']}'\n23-07-31 10:38:47.047 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:47.048 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': ['production_server_1:9092']}'\n23-07-31 10:38:47.048 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:47.067 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': ['production_server_1:9092']}'\n23-07-31 10:38:47.067 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-07-31 10:38:47.068 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:47.070 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': ['production_server_1:9092']}\n23-07-31 10:38:47.070 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:47.071 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:47.071 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:47.072 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['new_employee']\n23-07-31 10:38:47.072 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:47.072 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:47.073 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': ['production_server_1:9092']}\n23-07-31 10:38:47.074 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:47.074 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:47.074 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:47.075 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['employee_email']\n23-07-31 10:38:47.075 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:47.076 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-07-31 10:38:47.076 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': ['production_server_1:9092']}\n23-07-31 10:38:47.076 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-07-31 10:38:47.077 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-07-31 10:38:47.077 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-07-31 10:38:47.078 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['welcome_message']\n23-07-31 10:38:47.078 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-07-31 10:38:51.068 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:51.069 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:51.069 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:51.070 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:51.070 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:51.071 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:51.071 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:51.072 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-07-31 10:38:51.072 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-07-31 10:38:51.073 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-07-31 10:38:51.073 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:51.074 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-07-31 10:38:51.074 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\nok\n")))}c.isMDXComponent=!0}}]);
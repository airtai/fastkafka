"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[5171],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(a),k=r,f=d["".concat(l,".").concat(k)]||d[k]||u[k]||o;return a?n.createElement(f,s(s({ref:t},c),{},{components:a})):n.createElement(f,s({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=k;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5239:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={},s="Batch producing",i={unversionedId:"guides/Guide_23_Batch_Producing",id:"version-0.7.0/guides/Guide_23_Batch_Producing",title:"Batch producing",description:"If you want to send your data in batches @produces decorator makes",source:"@site/versioned_docs/version-0.7.0/guides/Guide_23_Batch_Producing.md",sourceDirName:"guides",slug:"/guides/Guide_23_Batch_Producing",permalink:"/docs/0.7.0/guides/Guide_23_Batch_Producing",draft:!1,tags:[],version:"0.7.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Defining a partition key",permalink:"/docs/0.7.0/guides/Guide_22_Partition_Keys"},next:{title:"Lifespan Events",permalink:"/docs/0.7.0/guides/Guide_05_Lifespan_Handler"}},l={},p=[{value:"Return a batch from the producing function",id:"return-a-batch-from-the-producing-function",level:2},{value:"App example",id:"app-example",level:2},{value:"Run the app",id:"run-the-app",level:2},{value:"Check if the batch was sent to the Kafka topic with the defined key",id:"check-if-the-batch-was-sent-to-the-kafka-topic-with-the-defined-key",level:2},{value:"Batch key",id:"batch-key",level:2},{value:"Check if the batch was sent to the Kafka topic",id:"check-if-the-batch-was-sent-to-the-kafka-topic",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"batch-producing"},"Batch producing"),(0,r.kt)("p",null,"If you want to send your data in batches ",(0,r.kt)("inlineCode",{parentName:"p"},"@produces")," decorator makes\nthat possible for you. By returning a ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," of messages you want to\nsend in a batch the producer will collect the messages and send them in\na batch to a Kafka broker."),(0,r.kt)("p",null,"This guide will demonstrate how to use this feature."),(0,r.kt)("h2",{id:"return-a-batch-from-the-producing-function"},"Return a batch from the producing function"),(0,r.kt)("p",null,"To define a batch that you want to produce to Kafka topic, you need to\nreturn the ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," of the messages that you want to be batched from your\nproducing function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom typing import List\n\n@app.produces()\nasync def to_hello_world(msgs: List[str]) -> List[HelloWorld]:\n    return [HelloWorld(msg=msg) for msg in msgs]\n")),(0,r.kt)("p",null,"In the example, we want to return the ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld")," message class batch\nthat is created from a list of msgs we passed into our producing\nfunction."),(0,r.kt)("p",null,'Lets also prepare a backgound task that will send a batch of \u201chello\nworld" messages when the app starts.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\n@app.run_in_background()\nasync def prepare_and_send_hello_batch():\n    msgs=[f"Hello world {i}" for i in range(10)]\n    await to_hello_world(msgs)\n')),(0,r.kt)("h2",{id:"app-example"},"App example"),(0,r.kt)("p",null,"We will modify the app example from ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/guides/Guide_21_Produces_Basics"},"@producer\nbasics")," guide to return the\n",(0,r.kt)("inlineCode",{parentName:"p"},"HelloWorld")," batch. The final app will look like this (make sure you\nreplace the ",(0,r.kt)("inlineCode",{parentName:"p"},"<url_of_your_kafka_bootstrap_server>")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"<port_of_your_kafka_bootstrap_server>")," with the actual values):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nimport asyncio\nfrom fastkafka import FastKafka\nfrom pydantic import BaseModel, Field\n\nclass HelloWorld(BaseModel):\n    msg: str = Field(\n        ...,\n        example="Hello",\n        description="Demo hello world message",\n    )\n\nkafka_brokers = {\n    "demo_broker": {\n        "url": "<url_of_your_kafka_bootstrap_server>",\n        "description": "local demo kafka broker",\n        "port": "<port_of_your_kafka_bootstrap_server>",\n    }\n}\n\napp = FastKafka(kafka_brokers=kafka_brokers)\n\n@app.run_in_background()\nasync def prepare_and_send_hello_batch():\n    msgs=[f"Hello world {i}" for i in range(10)]\n    await to_hello_world(msgs)\n\nfrom typing import List\n\n@app.produces()\nasync def to_hello_world(msgs: List[str]) -> List[HelloWorld]:\n    return [HelloWorld(msg=msg) for msg in msgs]\n')),(0,r.kt)("h2",{id:"run-the-app"},"Run the app"),(0,r.kt)("p",null,"Now we can run the app. Copy the code above in producer_example.py and\nrun it by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"fastkafka run --num-workers=1 --kafka-broker=demo_broker producer_with_key_example:app\n")),(0,r.kt)("p",null,"After running the command, you should see this output in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[46480]: [INFO] fastkafka._application.app: run_in_background() : Adding function 'prepare_and_send_hello_batch' as background task\n[46480]: [INFO] fastkafka._application.app: set_kafka_broker() : Setting bootstrap_servers value to '127.0.0.1:9092'\n[46480]: [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': '127.0.0.1:9092'}'\n[46480]: [INFO] fastkafka._application.app: _populate_bg_tasks() : Starting background task 'prepare_and_send_hello_batch'\nStarting process cleanup, this may take a few seconds...\n[INFO] fastkafka._server: terminate_asyncio_process(): Terminating the process 46480...\n[46480]: [INFO] fastkafka._application.app: _shutdown_bg_tasks() : Cancelling background task 'prepare_and_send_hello_batch'\n[46480]: [INFO] fastkafka._application.app: _shutdown_bg_tasks() : Waiting for background task 'prepare_and_send_hello_batch' to finish\n[46480]: [INFO] fastkafka._application.app: _shutdown_bg_tasks() : Execution finished for background task 'prepare_and_send_hello_batch'\n[INFO] fastkafka._server: terminate_asyncio_process(): Process 46480 terminated.\n")),(0,r.kt)("h2",{id:"check-if-the-batch-was-sent-to-the-kafka-topic-with-the-defined-key"},"Check if the batch was sent to the Kafka topic with the defined key"),(0,r.kt)("p",null,'Lets check the topic and see if there are \u201cHello world" messages in the\nhello_world topic. In your terminal run:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kafka-console-consumer.sh --topic=hello_world --from-beginning --bootstrap-server=<address_of_your_kafka_bootstrap_server>\n")),(0,r.kt)("p",null,"You should see the batch of messages in your topic."),(0,r.kt)("h2",{id:"batch-key"},"Batch key"),(0,r.kt)("p",null,"To define a key for your batch like in ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/guides/Guide_22_Partition_Keys"},"Defining a partition\nkey")," guide you can wrap the\nreturning value in a ",(0,r.kt)("inlineCode",{parentName:"p"},"KafkaEvent")," class. To learn more about defining a\npartition ke and ",(0,r.kt)("inlineCode",{parentName:"p"},"KafkaEvent")," class, please, have a look at ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/guides/Guide_22_Partition_Keys"},"Defining a\npartition key")," guide."),(0,r.kt)("p",null,"Let\u2019s demonstrate that."),(0,r.kt)("p",null,"To define a key, we just need to modify our producing function, like\nthis:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom typing import List\nfrom fastkafka import KafkaEvent\n\n@app.produces()\nasync def to_hello_world(msgs: List[str]) -> KafkaEvent[List[HelloWorld]]:\n    return KafkaEvent([HelloWorld(msg=msg) for msg in msgs], key=b"my_key")\n')),(0,r.kt)("p",null,"Now our app looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nimport asyncio\nfrom fastkafka import FastKafka\nfrom pydantic import BaseModel, Field\n\nclass HelloWorld(BaseModel):\n    msg: str = Field(\n        ...,\n        example="Hello",\n        description="Demo hello world message",\n    )\n\nkafka_brokers = {\n    "demo_broker": {\n        "url": "<url_of_your_kafka_bootstrap_server>",\n        "description": "local demo kafka broker",\n        "port": "<port_of_your_kafka_bootstrap_server>",\n    }\n}\n\napp = FastKafka(kafka_brokers=kafka_brokers)\n\n@app.run_in_background()\nasync def prepare_and_send_hello_batch():\n    msgs=[f"Hello world {i}" for i in range(10)]\n    await to_hello_world(msgs)\n\nfrom typing import List\nfrom fastkafka import KafkaEvent\n\n@app.produces()\nasync def to_hello_world(msgs: List[str]) -> KafkaEvent[List[HelloWorld]]:\n    return KafkaEvent([HelloWorld(msg=msg) for msg in msgs], key=b"my_key")\n')),(0,r.kt)("h2",{id:"check-if-the-batch-was-sent-to-the-kafka-topic"},"Check if the batch was sent to the Kafka topic"),(0,r.kt)("p",null,'Lets check the topic and see if there are \u201cHello world" messages in the\nhello_world topic, containing a defined key. In your terminal run:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kafka-console-consumer.sh --topic=hello_world --property print.key=true --from-beginning --bootstrap-server=<address_of_your_kafka_bootstrap_server>\n")),(0,r.kt)("p",null,"You should see the batch of messages with the defined key in your topic."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkfastkafka=self.webpackChunkfastkafka||[]).push([[6492],{3905:(e,a,o)=>{o.d(a,{Zo:()=>c,kt:()=>f});var s=o(7294);function t(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function n(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,s)}return o}function r(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?n(Object(o),!0).forEach((function(a){t(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function i(e,a){if(null==e)return{};var o,s,t=function(e,a){if(null==e)return{};var o,s,t={},n=Object.keys(e);for(s=0;s<n.length;s++)o=n[s],a.indexOf(o)>=0||(t[o]=e[o]);return t}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)o=n[s],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var p=s.createContext({}),k=function(e){var a=s.useContext(p),o=a;return e&&(o="function"==typeof e?e(a):r(r({},a),e)),o},c=function(e){var a=k(e.components);return s.createElement(p.Provider,{value:a},e.children)},_="mdxType",l={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},m=s.forwardRef((function(e,a){var o=e.components,t=e.mdxType,n=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),_=k(o),m=t,f=_["".concat(p,".").concat(m)]||_[m]||l[m]||n;return o?s.createElement(f,r(r({ref:a},c),{},{components:o})):s.createElement(f,r({ref:a},c))}));function f(e,a){var o=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var n=o.length,r=new Array(n);r[0]=m;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[_]="string"==typeof e?e:t,r[1]=i;for(var k=2;k<n;k++)r[k]=o[k];return s.createElement.apply(null,r)}return s.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9585:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>l,frontMatter:()=>n,metadata:()=>i,toc:()=>k});var s=o(7462),t=(o(7294),o(3905));const n={},r="Using multiple Kafka clusters",i={unversionedId:"guides/Guide_24_Using_Multiple_Kafka_Clusters",id:"version-0.7.0/guides/Guide_24_Using_Multiple_Kafka_Clusters",title:"Using multiple Kafka clusters",description:"Ready to take your FastKafka app to the next level? This guide shows you",source:"@site/versioned_docs/version-0.7.0/guides/Guide_24_Using_Multiple_Kafka_Clusters.md",sourceDirName:"guides",slug:"/guides/Guide_24_Using_Multiple_Kafka_Clusters",permalink:"/docs/0.7.0/guides/Guide_24_Using_Multiple_Kafka_Clusters",draft:!1,tags:[],version:"0.7.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Encoding and Decoding Kafka Messages with FastKafka",permalink:"/docs/0.7.0/guides/Guide_07_Encoding_and_Decoding_Messages_with_FastKafka"},next:{title:"Using Redpanda to test FastKafka",permalink:"/docs/0.7.0/guides/Guide_31_Using_redpanda_to_test_fastkafka"}},p={},k=[{value:"Test message",id:"test-message",level:3},{value:"Defining multiple broker configurations",id:"defining-multiple-broker-configurations",level:2},{value:"How it works",id:"how-it-works",level:4},{value:"Testing the application",id:"testing-the-application",level:2},{value:"Running the application",id:"running-the-application",level:2},{value:"Application documentation",id:"application-documentation",level:2},{value:"Examples on how to use multiple broker configurations",id:"examples-on-how-to-use-multiple-broker-configurations",level:2},{value:"Example #1",id:"example-1",level:3},{value:"Testing",id:"testing",level:4},{value:"Example #2",id:"example-2",level:3},{value:"Testing",id:"testing-1",level:4},{value:"Example #3",id:"example-3",level:3},{value:"Testing",id:"testing-2",level:4}],c={toc:k},_="wrapper";function l(e){let{components:a,...o}=e;return(0,t.kt)(_,(0,s.Z)({},c,o,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"using-multiple-kafka-clusters"},"Using multiple Kafka clusters"),(0,t.kt)("p",null,"Ready to take your FastKafka app to the next level? This guide shows you\nhow to connect to multiple Kafka clusters effortlessly. Consolidate\ntopics and produce messages across clusters like a pro. Unleash the full\npotential of your Kafka-powered app with FastKafka. Let\u2019s dive in and\nelevate your application\u2019s capabilities!"),(0,t.kt)("h3",{id:"test-message"},"Test message"),(0,t.kt)("p",null,"To showcase the functionalities of FastKafka and illustrate the concepts\ndiscussed, we can use a simple test message called ",(0,t.kt)("inlineCode",{parentName:"p"},"TestMsg"),". Here\u2019s the\ndefinition of the ",(0,t.kt)("inlineCode",{parentName:"p"},"TestMsg")," class:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"class TestMsg(BaseModel):\n    msg: str = Field(...)\n")),(0,t.kt)("h2",{id:"defining-multiple-broker-configurations"},"Defining multiple broker configurations"),(0,t.kt)("p",null,"When building a FastKafka application, you may need to consume messages\nfrom multiple Kafka clusters, each with its own set of broker\nconfigurations. FastKafka provides the flexibility to define different\nbroker clusters using the brokers argument in the consumes decorator.\nLet\u2019s explore an example code snippet"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, Field\n\nfrom fastkafka import FastKafka\n\nclass TestMsg(BaseModel):\n    msg: str = Field(...)\n\nkafka_brokers_1 = dict(\n    development=dict(url="dev.server_1", port=9092),\n    production=dict(url="prod.server_1", port=9092),\n)\nkafka_brokers_2 = dict(\n    development=dict(url="dev.server_2", port=9092),\n    production=dict(url="prod.server_1", port=9092),\n)\n\napp = FastKafka(kafka_brokers=kafka_brokers_1)\n\n\n@app.consumes(topic="preprocessed_signals")\nasync def on_preprocessed_signals_1(msg: TestMsg):\n    print(f"Received on s1: {msg=}")\n    await to_predictions_1(msg)\n\n\n@app.consumes(topic="preprocessed_signals", brokers=kafka_brokers_2)\nasync def on_preprocessed_signals_2(msg: TestMsg):\n    print(f"Received on s2: {msg=}")\n    await to_predictions_2(msg)\n    \n@app.produces(topic="predictions")\nasync def to_predictions_1(msg: TestMsg) -> TestMsg:\n    return msg\n    \n@app.produces(topic="predictions", brokers=kafka_brokers_2)\nasync def to_predictions_2(msg: TestMsg) -> TestMsg:\n    return msg\n')),(0,t.kt)("p",null,"In this example, the application has two consumes endpoints, both of\nwhich will consume events from ",(0,t.kt)("inlineCode",{parentName:"p"},"preprocessed_signals")," topic.\n",(0,t.kt)("inlineCode",{parentName:"p"},"on_preprocessed_signals_1")," will consume events from ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_1"),"\nconfiguration and ",(0,t.kt)("inlineCode",{parentName:"p"},"on_preprocessed_signals_2")," will consume events from\n",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_2")," configuration. When producing, ",(0,t.kt)("inlineCode",{parentName:"p"},"to_predictions_1")," will\nproduce to ",(0,t.kt)("inlineCode",{parentName:"p"},"predictions")," topic on ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_1")," cluster and\n",(0,t.kt)("inlineCode",{parentName:"p"},"to_predictions_2")," will produce to ",(0,t.kt)("inlineCode",{parentName:"p"},"predictions")," topic on\n",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_2")," cluster."),(0,t.kt)("h4",{id:"how-it-works"},"How it works"),(0,t.kt)("p",null,"The ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_1")," configuration represents the primary cluster,\nwhile ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_2")," serves as an alternative cluster specified in\nthe decorator."),(0,t.kt)("p",null,"Using the FastKafka class, the app object is initialized with the\nprimary broker configuration (",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_1"),"). By default, the\n",(0,t.kt)("inlineCode",{parentName:"p"},"@app.consumes")," decorator without the brokers argument consumes messages\nfrom the ",(0,t.kt)("inlineCode",{parentName:"p"},"preprocessed_signals")," topic on ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_1"),"."),(0,t.kt)("p",null,"To consume messages from a different cluster, the ",(0,t.kt)("inlineCode",{parentName:"p"},"@app.consumes"),"\ndecorator includes the ",(0,t.kt)("inlineCode",{parentName:"p"},"brokers")," argument. This allows explicit\nspecification of the broker cluster in the ",(0,t.kt)("inlineCode",{parentName:"p"},"on_preprocessed_signals_2"),"\nfunction, enabling consumption from the same topic but using the\n",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_2")," configuration."),(0,t.kt)("p",null,"The brokers argument can also be used in the @app.produces decorator to\ndefine multiple broker clusters for message production."),(0,t.kt)("p",null,"It\u2019s important to ensure that all broker configurations have the same\nrequired settings as the primary cluster to ensure consistent behavior."),(0,t.kt)("h2",{id:"testing-the-application"},"Testing the application"),(0,t.kt)("p",null,"To test our FastKafka \u2018mirroring\u2019 application, we can use our testing\nframework. Lets take a look how it\u2019s done:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from fastkafka.testing import Tester\n\nasync with Tester(app) as tester:\n    # Send TestMsg to topic/broker pair on_preprocessed_signals_1 is consuming from\n    await tester.mirrors[app.on_preprocessed_signals_1](TestMsg(msg="signal_s1"))\n    # Assert on_preprocessed_signals_1 consumed sent message\n    await app.awaited_mocks.on_preprocessed_signals_1.assert_called_with(\n        TestMsg(msg="signal_s1"), timeout=5\n    )\n    # Assert app has produced a prediction\n    await tester.mirrors[app.to_predictions_1].assert_called_with(\n        TestMsg(msg="signal_s1"), timeout=5\n    )\n\n    # Send TestMsg to topic/broker pair on_preprocessed_signals_2 is consuming from\n    await tester.mirrors[app.on_preprocessed_signals_2](TestMsg(msg="signal_s2"))\n    # Assert on_preprocessed_signals_2 consumed sent message\n    await app.awaited_mocks.on_preprocessed_signals_2.assert_called_with(\n        TestMsg(msg="signal_s2"), timeout=5\n    )\n    # Assert app has produced a prediction\n    await tester.mirrors[app.to_predictions_2].assert_called_with(\n        TestMsg(msg="signal_s2"), timeout=5\n    )\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"23-05-30 10:33:08.720 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._start() called\n23-05-30 10:33:08.720 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-05-30 10:33:08.721 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-05-30 10:33:08.721 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'dev.server_1:9092'}'\n23-05-30 10:33:08.722 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:08.722 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'dev.server_2:9092'}'\n23-05-30 10:33:08.723 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:08.741 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'dev.server_1:9092'}'\n23-05-30 10:33:08.741 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:08.742 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'dev.server_2:9092'}'\n23-05-30 10:33:08.743 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:08.744 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:08.746 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'dev.server_1:9092'}\n23-05-30 10:33:08.746 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:08.747 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:08.748 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:08.748 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['preprocessed_signals']\n23-05-30 10:33:08.749 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:33:08.754 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:08.754 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'dev.server_2:9092'}\n23-05-30 10:33:08.755 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:08.755 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:08.755 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:08.756 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['preprocessed_signals']\n23-05-30 10:33:08.756 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:33:08.757 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:08.757 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'dev.server_1:9092'}\n23-05-30 10:33:08.758 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:08.758 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:08.759 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:08.759 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['predictions']\n23-05-30 10:33:08.759 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:33:08.760 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:08.761 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'dev.server_2:9092'}\n23-05-30 10:33:08.762 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:08.762 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:08.762 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:08.763 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['predictions']\n23-05-30 10:33:08.763 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\nReceived on s1: msg=TestMsg(msg='signal_s1')\nReceived on s2: msg=TestMsg(msg='signal_s2')\n23-05-30 10:33:13.745 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:13.746 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:13.746 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:13.747 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:13.747 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:13.748 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:13.748 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:13.749 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:13.749 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:13.750 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:13.750 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:13.751 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:13.751 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:13.751 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:13.753 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:13.753 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:13.753 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._stop() called\n23-05-30 10:33:13.754 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\n")),(0,t.kt)("p",null,"The usage of the ",(0,t.kt)("inlineCode",{parentName:"p"},"tester.mirrors")," dictionary allows specifying the\ndesired topic/broker combination for sending the test messages,\nespecially when working with multiple Kafka clusters. This ensures that\nthe data is sent to the appropriate topic/broker based on the consuming\nfunction, and consumed from appropriate topic/broker based on the\nproducing function."),(0,t.kt)("h2",{id:"running-the-application"},"Running the application"),(0,t.kt)("p",null,"You can run your application using ",(0,t.kt)("inlineCode",{parentName:"p"},"fastkafka run")," CLI command in the\nsame way that you would run a single cluster app."),(0,t.kt)("p",null,"To start your app, copy the code above in multi_cluster_example.py and\nrun it by running:"),(0,t.kt)("p",null,"Now we can run the app. Copy the code above in multi_cluster_example.py,\nadjust your server configurations, and run it by running"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-shell"},"fastkafka run --num-workers=1 --kafka-broker=development multi_cluster_example:app\n")),(0,t.kt)("p",null,"In your app logs, you should see your app starting up and your two\nconsumer functions connecting to different kafka clusters."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"[90735]: 23-05-30 10:33:29.699 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n[90735]: 23-05-30 10:33:29.700 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': '127.0.0.1:9092'}\n[90735]: 23-05-30 10:33:29.700 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n[90735]: 23-05-30 10:33:29.700 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': '127.0.0.1:57647'}\n[90735]: 23-05-30 10:33:29.714 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n[90735]: 23-05-30 10:33:29.714 [INFO] aiokafka.consumer.subscription_state: Updating subscribed topics to: frozenset({'preprocessed_signals'})\n[90735]: 23-05-30 10:33:29.714 [INFO] aiokafka.consumer.consumer: Subscribed to topic(s): {'preprocessed_signals'}\n[90735]: 23-05-30 10:33:29.714 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n[90735]: 23-05-30 10:33:29.718 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n[90735]: 23-05-30 10:33:29.718 [INFO] aiokafka.consumer.subscription_state: Updating subscribed topics to: frozenset({'preprocessed_signals'})\n[90735]: 23-05-30 10:33:29.718 [INFO] aiokafka.consumer.consumer: Subscribed to topic(s): {'preprocessed_signals'}\n[90735]: 23-05-30 10:33:29.718 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n[90735]: 23-05-30 10:33:29.722 [INFO] aiokafka.consumer.group_coordinator: Metadata for topic has changed from {} to {'preprocessed_signals': 1}. \n[90735]: 23-05-30 10:33:29.723 [INFO] aiokafka.consumer.group_coordinator: Metadata for topic has changed from {} to {'preprocessed_signals': 1}. \nStarting process cleanup, this may take a few seconds...\n23-05-30 10:33:33.548 [INFO] fastkafka._server: terminate_asyncio_process(): Terminating the process 90735...\n[90735]: 23-05-30 10:33:34.666 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n[90735]: 23-05-30 10:33:34.667 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n[90735]: 23-05-30 10:33:34.667 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n[90735]: 23-05-30 10:33:34.667 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:34.777 [INFO] fastkafka._server: terminate_asyncio_process(): Process 90735 terminated.\n")),(0,t.kt)("h2",{id:"application-documentation"},"Application documentation"),(0,t.kt)("p",null,"At the moment the documentation for multicluster app is not yet\nimplemented, but it is under development and you can expecti it soon!"),(0,t.kt)("h2",{id:"examples-on-how-to-use-multiple-broker-configurations"},"Examples on how to use multiple broker configurations"),(0,t.kt)("h3",{id:"example-1"},"Example ","#","1"),(0,t.kt)("p",null,"In this section, we\u2019ll explore how you can effectively forward topics\nbetween different Kafka clusters, enabling seamless data synchronization\nfor your applications."),(0,t.kt)("p",null,"Imagine having two Kafka clusters, namely ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_1")," and\n",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_2"),", each hosting its own set of topics and messages. Now,\nif you want to forward a specific topic (in this case:\n",(0,t.kt)("inlineCode",{parentName:"p"},"preprocessed_signals"),") from kafka_brokers_1 to kafka_brokers_2,\nFastKafka provides an elegant solution."),(0,t.kt)("p",null,"Let\u2019s examine the code snippet that configures our application for topic\nforwarding:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, Field\n\nfrom fastkafka import FastKafka\n\nclass TestMsg(BaseModel):\n    msg: str = Field(...)\n\nkafka_brokers_1 = dict(localhost=dict(url="server_1", port=9092))\nkafka_brokers_2 = dict(localhost=dict(url="server_2", port=9092))\n\napp = FastKafka(kafka_brokers=kafka_brokers_1)\n\n\n@app.consumes(topic="preprocessed_signals")\nasync def on_preprocessed_signals_original(msg: TestMsg):\n    await to_preprocessed_signals_forward(msg)\n\n\n@app.produces(topic="preprocessed_signals", brokers=kafka_brokers_2)\nasync def to_preprocessed_signals_forward(data: TestMsg) -> TestMsg:\n    return data\n')),(0,t.kt)("p",null,"Here\u2019s how it works: our FastKafka application is configured to consume\nmessages from ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_1")," and process them in the\n",(0,t.kt)("inlineCode",{parentName:"p"},"on_preprocessed_signals_original")," function. We want to forward these\nmessages to ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_2"),". To achieve this, we define the\n",(0,t.kt)("inlineCode",{parentName:"p"},"to_preprocessed_signals_forward")," function as a producer, seamlessly\nproducing the processed messages to the preprocessed_signals topic\nwithin the ",(0,t.kt)("inlineCode",{parentName:"p"},"kafka_brokers_2")," cluster."),(0,t.kt)("h4",{id:"testing"},"Testing"),(0,t.kt)("p",null,"To test our FastKafka forwarding application, we can use our testing\nframework. Let\u2019s take a look at the testing code snippet:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from fastkafka.testing import Tester\n\nasync with Tester(app) as tester:\n    await tester.mirrors[app.on_preprocessed_signals_original](TestMsg(msg="signal"))\n    await tester.mirrors[app.to_preprocessed_signals_forward].assert_called(timeout=5)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"23-05-30 10:33:40.969 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._start() called\n23-05-30 10:33:40.970 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-05-30 10:33:40.971 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-05-30 10:33:40.972 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_2:9092'}'\n23-05-30 10:33:40.972 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:40.982 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_1:9092'}'\n23-05-30 10:33:40.982 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:40.983 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:40.984 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_1:9092'}\n23-05-30 10:33:40.984 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:40.985 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:40.985 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:40.986 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['preprocessed_signals']\n23-05-30 10:33:40.987 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:33:40.988 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:40.988 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_2:9092'}\n23-05-30 10:33:40.989 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:40.989 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:40.990 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:40.990 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['preprocessed_signals']\n23-05-30 10:33:40.991 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:33:44.983 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:44.984 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:44.984 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:44.985 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:44.985 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:44.986 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:44.987 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:44.987 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:44.987 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._stop() called\n23-05-30 10:33:44.988 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\n")),(0,t.kt)("p",null,"With the help of the ",(0,t.kt)("strong",{parentName:"p"},"Tester")," object, we can simulate and verify the\nbehavior of our FastKafka application. Here\u2019s how it works:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"We create an instance of the ",(0,t.kt)("strong",{parentName:"p"},"Tester")," by passing in our ",(0,t.kt)("em",{parentName:"p"},"app"),"\nobject, which represents our FastKafka application.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Using the ",(0,t.kt)("strong",{parentName:"p"},"tester.mirrors")," dictionary, we can send a message to a\nspecific Kafka broker and topic combination. In this case, we use\n",(0,t.kt)("inlineCode",{parentName:"p"},"tester.mirrors[app.on_preprocessed_signals_original]"),' to send a\nTestMsg message with the content \u201csignal" to the appropriate Kafka\nbroker and topic.')),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"After sending the message, we can perform assertions on the mirrored\nfunction using\n",(0,t.kt)("inlineCode",{parentName:"p"},"tester.mirrors[app.to_preprocessed_signals_forward].assert_called(timeout=5)"),".\nThis assertion ensures that the mirrored function has been called\nwithin a specified timeout period (in this case, 5 seconds)."))),(0,t.kt)("h3",{id:"example-2"},"Example ","#","2"),(0,t.kt)("p",null,"In this section, we\u2019ll explore how you can effortlessly consume data\nfrom multiple sources, process it, and aggregate the results into a\nsingle topic on a specific cluster."),(0,t.kt)("p",null,"Imagine you have two Kafka clusters: ",(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_1")," and\n",(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_2"),", each hosting its own set of topics and messages.\nNow, what if you want to consume data from both clusters, perform some\nprocessing, and produce the results to a single topic on\n",(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_1"),"? FastKafka has got you covered!"),(0,t.kt)("p",null,"Let\u2019s take a look at the code snippet that configures our application\nfor aggregating multiple clusters:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, Field\n\nfrom fastkafka import FastKafka\n\nclass TestMsg(BaseModel):\n    msg: str = Field(...)\n\nkafka_brokers_1 = dict(localhost=dict(url="server_1", port=9092))\nkafka_brokers_2 = dict(localhost=dict(url="server_2", port=9092))\n\napp = FastKafka(kafka_brokers=kafka_brokers_1)\n\n\n@app.consumes(topic="preprocessed_signals")\nasync def on_preprocessed_signals_1(msg: TestMsg):\n    print(f"Default: {msg=}")\n    await to_predictions(msg)\n\n\n@app.consumes(topic="preprocessed_signals", brokers=kafka_brokers_2)\nasync def on_preprocessed_signals_2(msg: TestMsg):\n    print(f"Specified: {msg=}")\n    await to_predictions(msg)\n\n\n@app.produces(topic="predictions")\nasync def to_predictions(prediction: TestMsg) -> TestMsg:\n    print(f"Sending prediction: {prediction}")\n    return [prediction]\n')),(0,t.kt)("p",null,'Here\u2019s the idea: our FastKafka application is set to consume messages\nfrom the topic \u201cpreprocessed_signals" on ',(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_1")," cluster, as\nwell as from the same topic on ",(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_2")," cluster. We have two\nconsuming functions, ",(0,t.kt)("inlineCode",{parentName:"p"},"on_preprocessed_signals_1")," and\n",(0,t.kt)("inlineCode",{parentName:"p"},"on_preprocessed_signals_2"),", that handle the messages from their\nrespective clusters. These functions perform any required processing, in\nthis case, just calling the to_predictions function."),(0,t.kt)("p",null,'The exciting part is that the to_predictions function acts as a\nproducer, sending the processed results to the \u201cpredictions" topic on\n',(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_1 cluster"),". By doing so, we effectively aggregate the\ndata from multiple sources into a single topic on a specific cluster."),(0,t.kt)("p",null,"This approach enables you to consume data from multiple Kafka clusters,\nprocess it, and produce the aggregated results to a designated topic.\nWhether you\u2019re generating predictions, performing aggregations, or any\nother form of data processing, FastKafka empowers you to harness the\nfull potential of multiple clusters."),(0,t.kt)("h4",{id:"testing-1"},"Testing"),(0,t.kt)("p",null,"Let\u2019s take a look at the testing code snippet:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from fastkafka.testing import Tester\n\nasync with Tester(app) as tester:\n    await tester.mirrors[app.on_preprocessed_signals_1](TestMsg(msg="signal"))\n    await tester.mirrors[app.on_preprocessed_signals_2](TestMsg(msg="signal"))\n    await tester.on_predictions.assert_called(timeout=5)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"23-05-30 10:33:50.827 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._start() called\n23-05-30 10:33:50.827 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-05-30 10:33:50.828 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-05-30 10:33:50.829 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_1:9092'}'\n23-05-30 10:33:50.829 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:50.875 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_1:9092'}'\n23-05-30 10:33:50.875 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:50.876 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_2:9092'}'\n23-05-30 10:33:50.876 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:33:50.877 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:50.878 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_1:9092'}\n23-05-30 10:33:50.879 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:50.879 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:50.879 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:50.880 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['preprocessed_signals']\n23-05-30 10:33:50.880 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:33:50.881 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:50.881 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_2:9092'}\n23-05-30 10:33:50.881 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:50.882 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:50.882 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:50.883 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['preprocessed_signals']\n23-05-30 10:33:50.883 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:33:50.883 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:33:50.884 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_1:9092'}\n23-05-30 10:33:50.885 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:33:50.885 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:33:50.886 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:33:50.886 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['predictions']\n23-05-30 10:33:50.886 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\nDefault: msg=TestMsg(msg='signal')\nSending prediction: msg='signal'\nSpecified: msg=TestMsg(msg='signal')\nSending prediction: msg='signal'\n23-05-30 10:33:54.877 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:54.878 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:54.878 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:54.879 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:54.880 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:54.881 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:54.881 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:54.881 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:54.882 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:33:54.882 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:33:54.883 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:33:54.884 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:33:54.884 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._stop() called\n23-05-30 10:33:54.884 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\n")),(0,t.kt)("p",null,"Here\u2019s how the code above works:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Within an ",(0,t.kt)("inlineCode",{parentName:"p"},"async with")," block, create an instance of the Tester by\npassing in your app object, representing your FastKafka application.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Using the tester.mirrors dictionary, you can send messages to\nspecific Kafka broker and topic combinations. In this case, we use\n",(0,t.kt)("inlineCode",{parentName:"p"},"tester.mirrors[app.on_preprocessed_signals_1]")," and\n",(0,t.kt)("inlineCode",{parentName:"p"},"tester.mirrors[app.on_preprocessed_signals_2]"),' to send TestMsg\nmessages with the content \u201csignal" to the corresponding Kafka broker\nand topic combinations.')),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"After sending the messages, you can perform assertions on the\n",(0,t.kt)("strong",{parentName:"p"},"on_predictions")," function using\n",(0,t.kt)("inlineCode",{parentName:"p"},"tester.on_predictions.assert_called(timeout=5)"),". This assertion\nensures that the on_predictions function has been called within a\nspecified timeout period (in this case, 5 seconds)."))),(0,t.kt)("h3",{id:"example-3"},"Example ","#","3"),(0,t.kt)("p",null,"In some scenarios, you may need to produce messages to multiple Kafka\nclusters simultaneously. FastKafka simplifies this process by allowing\nyou to configure your application to produce messages to multiple\nclusters effortlessly. Let\u2019s explore how you can achieve this:"),(0,t.kt)("p",null,"Consider the following code snippet that demonstrates producing messages\nto multiple clusters:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, Field\n\nfrom fastkafka import FastKafka\n\nclass TestMsg(BaseModel):\n    msg: str = Field(...)\n\nkafka_brokers_1 = dict(localhost=dict(url="server_1", port=9092))\nkafka_brokers_2 = dict(localhost=dict(url="server_2", port=9092))\n\napp = FastKafka(kafka_brokers=kafka_brokers_1)\n\n\n@app.consumes(topic="preprocessed_signals")\nasync def on_preprocessed_signals(msg: TestMsg):\n    print(f"{msg=}")\n    await to_predictions_1(TestMsg(msg="prediction"))\n    await to_predictions_2(TestMsg(msg="prediction"))\n\n\n@app.produces(topic="predictions")\nasync def to_predictions_1(prediction: TestMsg) -> TestMsg:\n    print(f"Sending prediction to s1: {prediction}")\n    return [prediction]\n\n\n@app.produces(topic="predictions", brokers=kafka_brokers_2)\nasync def to_predictions_2(prediction: TestMsg) -> TestMsg:\n    print(f"Sending prediction to s2: {prediction}")\n    return [prediction]\n')),(0,t.kt)("p",null,"Here\u2019s what you need to know about producing to multiple clusters:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"We define two Kafka broker configurations: ",(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_1")," and\n",(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_2"),", representing different clusters with their\nrespective connection details.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"We create an instance of the FastKafka application, specifying\n",(0,t.kt)("strong",{parentName:"p"},"kafka_brokers_1")," as the primary cluster for producing messages.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"The ",(0,t.kt)("inlineCode",{parentName:"p"},"on_preprocessed_signals"),' function serves as a consumer,\nhandling incoming messages from the \u201cpreprocessed_signals" topic.\nWithin this function, we invoke two producer functions:\n',(0,t.kt)("inlineCode",{parentName:"p"},"to_predictions_1")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"to_predictions_2"),".")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"The ",(0,t.kt)("inlineCode",{parentName:"p"},"to_predictions_1"),' function sends predictions to the\n\u201cpredictions" topic on ',(0,t.kt)("em",{parentName:"p"},"kafka_brokers_1")," cluster.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Additionally, the ",(0,t.kt)("inlineCode",{parentName:"p"},"to_predictions_2"),' function sends the same\npredictions to the \u201cpredictions" topic on ',(0,t.kt)("em",{parentName:"p"},"kafka_brokers_2")," cluster.\nThis allows for producing the same data to multiple clusters\nsimultaneously."))),(0,t.kt)("p",null,"By utilizing this approach, you can seamlessly produce messages to\nmultiple Kafka clusters, enabling you to distribute data across\ndifferent environments or leverage the strengths of various clusters."),(0,t.kt)("p",null,"Feel free to customize the producer functions as per your requirements,\nperforming any necessary data transformations or enrichment before\nsending the predictions."),(0,t.kt)("p",null,"With FastKafka, producing to multiple clusters becomes a breeze,\nempowering you to harness the capabilities of multiple environments\neffortlessly."),(0,t.kt)("h4",{id:"testing-2"},"Testing"),(0,t.kt)("p",null,"Let\u2019s take a look at the testing code snippet:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from fastkafka.testing import Tester\n\nasync with Tester(app) as tester:\n    await tester.to_preprocessed_signals(TestMsg(msg="signal"))\n    await tester.mirrors[to_predictions_1].assert_called(timeout=5)\n    await tester.mirrors[to_predictions_2].assert_called(timeout=5)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"23-05-30 10:34:00.033 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._start() called\n23-05-30 10:34:00.034 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._patch_consumers_and_producers(): Patching consumers and producers!\n23-05-30 10:34:00.035 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker starting\n23-05-30 10:34:00.036 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_1:9092'}'\n23-05-30 10:34:00.037 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:34:00.038 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_2:9092'}'\n23-05-30 10:34:00.038 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:34:00.052 [INFO] fastkafka._application.app: _create_producer() : created producer using the config: '{'bootstrap_servers': 'server_1:9092'}'\n23-05-30 10:34:00.053 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched start() called()\n23-05-30 10:34:00.054 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:34:00.055 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_1:9092'}\n23-05-30 10:34:00.055 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:34:00.056 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:34:00.056 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:34:00.057 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['preprocessed_signals']\n23-05-30 10:34:00.057 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:34:00.057 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:34:00.058 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_1:9092'}\n23-05-30 10:34:00.058 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:34:00.059 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:34:00.059 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:34:00.062 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['predictions']\n23-05-30 10:34:00.062 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\n23-05-30 10:34:00.063 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() starting...\n23-05-30 10:34:00.063 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer created using the following parameters: {'auto_offset_reset': 'earliest', 'max_poll_records': 100, 'bootstrap_servers': 'server_2:9092'}\n23-05-30 10:34:00.064 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched start() called()\n23-05-30 10:34:00.064 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer started.\n23-05-30 10:34:00.065 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched subscribe() called\n23-05-30 10:34:00.065 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer.subscribe(), subscribing to: ['predictions']\n23-05-30 10:34:00.065 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer subscribed.\nmsg=TestMsg(msg='signal')\nSending prediction to s1: msg='prediction'\nSending prediction to s2: msg='prediction'\n23-05-30 10:34:04.055 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:34:04.055 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:34:04.056 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:34:04.056 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:34:04.057 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:34:04.057 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:34:04.058 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:34:04.058 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaConsumer patched stop() called\n23-05-30 10:34:04.058 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop(): Consumer stopped.\n23-05-30 10:34:04.059 [INFO] fastkafka._components.aiokafka_consumer_loop: aiokafka_consumer_loop() finished.\n23-05-30 10:34:04.059 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:34:04.060 [INFO] fastkafka._testing.in_memory_broker: AIOKafkaProducer patched stop() called\n23-05-30 10:34:04.060 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker._stop() called\n23-05-30 10:34:04.060 [INFO] fastkafka._testing.in_memory_broker: InMemoryBroker stopping\n")),(0,t.kt)("p",null,"Here\u2019s how you can perform the necessary tests:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Within an async with block, create an instance of the ",(0,t.kt)("strong",{parentName:"p"},"Tester")," by\npassing in your app object, representing your FastKafka application.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Using the ",(0,t.kt)("inlineCode",{parentName:"p"},"tester.to_preprocessed_signals"),' method, you can send a\nTestMsg message with the content \u201csignal".')),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"After sending the message, you can perform assertions on the\nto_predictions_1 and to_predictions_2 functions using\n",(0,t.kt)("inlineCode",{parentName:"p"},"tester.mirrors[to_predictions_1].assert_called(timeout=5)")," and\n",(0,t.kt)("inlineCode",{parentName:"p"},"tester.mirrors[to_predictions_2].assert_called(timeout=5)"),". These\nassertions ensure that the respective producer functions have\nproduced data to their respective topic/broker combinations."))),(0,t.kt)("p",null,"By employing this testing approach, you can verify that the producing\nfunctions correctly send messages to their respective clusters. The\ntesting framework provided by FastKafka enables you to ensure the\naccuracy and reliability of your application\u2019s producing logic."))}l.isMDXComponent=!0}}]);
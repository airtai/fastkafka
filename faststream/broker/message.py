from abc import abstractmethod
from dataclasses import dataclass, field
from typing import Any, Generic, Optional, TypeVar, Union
from uuid import uuid4

from faststream.types import AnyDict, DecodedMessage

Msg = TypeVar("Msg")


@dataclass
class ABCStreamMessage(Generic[Msg]):
    """A generic class to represent a stream message.

    Attributes:
        raw_message : the raw message
        body : the body of the message, can be bytes or any other type
        decoded_body : the decoded message body, if applicable
        content_type : the content type of the message
        reply_to : the reply-to address of the message
        headers : additional headers of the message
        message_id : the unique identifier of the message
        correlation_id : the correlation identifier of the message
        processed : a flag indicating whether the message has been processed or not
    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    raw_message: Msg

    body: Union[bytes, Any]
    decoded_body: Optional[DecodedMessage] = None

    content_type: Optional[str] = None
    reply_to: str = ""
    headers: AnyDict = field(default_factory=dict)
    message_id: str = field(default_factory=lambda: str(uuid4()))  # pragma: no cover
    correlation_id: str = field(
        default_factory=lambda: str(uuid4())
    )  # pragma: no cover

    processed: bool = False


class SyncStreamMessage(ABCStreamMessage[Msg]):
    @abstractmethod
    def ack(self, **kwargs: Any) -> None:
        raise NotImplementedError()

    @abstractmethod
    def nack(self, **kwargs: Any) -> None:
        """A function to raise a NotImplementedError.

        Args:
            kwargs: Additional keyword arguments

        Returns:
            None
        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        raise NotImplementedError()

    @abstractmethod
    def reject(self, **kwargs: Any) -> None:
        """Reject function.

        Args:
            **kwargs: Arbitrary keyword arguments

        Returns:
            None

        Raises:
            NotImplementedError: Always raises NotImplementedError
        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        raise NotImplementedError()


class StreamMessage(ABCStreamMessage[Msg]):
    @abstractmethod
    async def ack(self, **kwargs: Any) -> None:
        """Acknowledge method.

        Args:
            **kwargs: Additional keyword arguments

        Raises:
            NotImplementedError: If the method is not implemented.
        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        raise NotImplementedError()

    @abstractmethod
    async def nack(self, **kwargs: Any) -> None:
        """A function to handle a nack.

        Args:
            **kwargs: Additional arguments

        Returns:
            None

        Raises:
            NotImplementedError: If the function is not implemented.
        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        raise NotImplementedError()

    @abstractmethod
    async def reject(self, **kwargs: Any) -> None:
        """Rejects the operation.

        Args:
            **kwargs: Additional keyword arguments

        Returns:
            None

        Raises:
            NotImplementedError: Always raises NotImplementedError
        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        raise NotImplementedError()
